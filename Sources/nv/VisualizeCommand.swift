// Copyright Â© 2025 Saleem Abdulrasool <compnerd@compnerd.org>. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause

import ArgumentParser
import Foundation
@preconcurrency
import Mustache
import HeapModule

private let kVisualizationTemplate = Mustache("""
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Build Visualization</title>

  <!-- bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css" rel="stylesheet" />

  <!-- Visualization Library -->
  <script src="https://unpkg.com/vis-timeline/standalone/umd/vis-timeline-graph2d.min.js"></script>

  <style>
    body {
      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .navbar {
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .stat-card {
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      border: none;
      border-radius: 12px;
      background: white;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .stat-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
    }

    .card {
      border-radius: 12px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      border: none;
    }

    .card-header {
      background: linear-gradient(90deg, #007bff, #0056b3);
      color: white;
      border-radius: 12px 12px 0 0;
    }

    h2, h4 {
      font-weight: 600;
    }

    .text-primary {
      color: #007bff !important;
    }

    .text-success {
      color: #28a745 !important;
    }

    .text-info {
      color: #17a2b8 !important;
    }

    .text-secondary {
      color: #6c757d !important;
    }

    .text-warning {
      color: #ffc107 !important;
    }

    .text-danger {
      color: #dc3545 !important;
    }
  </style>
</head>
<body>
  <nav class="navbar navbar-dark bg-dark">
    <div class="container">
      <a class="navbar-brand" href="#">
        <i class="bi bi-graph-up"></i>
        &nbsp; Build Visualization
      </a>
      <small class="text-light"> Generated by <tt>nv visualize</tt></small>
    </div>
  </nav>

  <div class="container mt-4">
    <!-- Summary Statistics -->
    <div class="row mb-4">
      <div class="col-12">
        <h2 class="mb-3">
          <i class="bi bi-speedometer2"></i>
          &nbsp; Build Overview
        </h2>
      </div>
      <div class="col-md-2 col-sm-4 col-6 mb-3">
        <div class="card stat-card h-100">
          <div class="card-body text-center">
            <i class="bi bi-bullseye display-6 text-primary"></i>
            <h5 class="card-title mt-2">Targets</h5>
            <h3 id="targets" class="text-primary">{{& targets}}</h3>
          </div>
        </div>
      </div>
      <div class="col-md-2 col-sm-4 col-6 mb-3">
        <div class="card stat-card h-100">
          <div class="card-body text-center">
            <i class="bi bi-clock display-6 text-secondary"></i>
            <h5 class="card-title mt-2">Wall Time</h5>
            <h3 id="wall-time" class="text-secondary">{{& wall-time}}</h3>
          </div>
        </div>
      </div>
      <div class="col-md-2 col-sm-4 col-6 mb-3">
        <div class="card stat-card h-100">
          <div class="card-body text-center">
            <i class="bi bi-cpu display-6 text-success"></i>
            <h5 class="card-title mt-2">CPU Time</h5>
            <h3 id="cpu-time" class="text-success">{{& cpu-time}}</h3>
          </div>
        </div>
      </div>
      <div class="col-md-2 col-sm-4 col-6 mb-3">
        <div class="card stat-card h-100">
          <div class="card-body text-center">
            <i class="bi bi-speedometer2 display-6 text-info"></i>
            <h5 class="card-title mt-2">Core Utilization</h5>
            <h3 id="core-count" class="text-info">{{& core-count}}</h3>
          </div>
        </div>
      </div>
      <div class="col-md-2 col-sm-4 col-6 mb-3">
        <div class="card stat-card h-100">
          <div class="card-body text-center">
            <i class="bi bi-lightning display-6 text-dark"></i>
            <h5 class="card-title mt-2">Efficiency</h5>
            <h3 id="efficiency" class="text-dark">{{& efficiency}}</h3>
          </div>
        </div>
      </div>
      <div class="col-md-2 col-sm-4 col-6 mb-3">
        <div class="card stat-card h-100">
          <div class="card-body text-center">
            <i class="bi bi-hourglass-split display-6 text-muted"></i>
            <h5 class="card-title mt-2">Average Time</h5>
            <h3 id="average-time" class="text-muted">{{& average-time}}</h3>
          </div>
        </div>
      </div>
    </div>

    <!-- Build Timeline -->
    <div class="row mb-4">
      <div class="col-12">
        <div class="card">
          <div class="card-header">
            <h4 class="mb-0">
              <i class="bi bi-calendar3"></i>
              &nbsp; Build Timeline
            </h4>
            <small class="text-muted">Scheduled Timeline</small>
          </div>
          <div class="card-body">
            <div id="visualization"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Top Bottlenecks -->
    <div class="row mb-4">
      <div class="col-12">
        <div class="card">
          <div class="card-header">
            <h4 class="mb-0">
              <i class="bi bi-exclamation-triangle"></i>
              &nbsp; Top Bottlenecks
            </h4>
            <small class="text-muted">Slowest Build Targets</small>
          </div>
          <div class="card-body">
            <table class="table table-striped" style="margin-bottom: 0;">
              <thead>
                <tr>
                  <th scope="col" style="width: 3rem;">#</th>
                  <th scope="col">Target</th>
                  <th scope="col">Duration</th>
                </tr>
              </thead>
              <tbody>
                {{#bottlenecks}}
                <tr>
                  <th scope="row" style="width: 3rem;">{{rank}}</th>
                  <td title="{{full_target}}">{{target}}</td>
                  <td>{{duration}}</td>
                </tr>
                {{/bottlenecks}}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    var groups = new vis.DataSet([
      {{#groups}}{ id: {{id}}, content: '{{label}}', order: {{id}} }{{^last}},
      {{/last}}{{/groups}}
    ]);

    var items = new vis.DataSet([
      {{#tasks}}{ id: {{id}}, content: '{{content}}', title: '{{title}}', start: {{start}}, end: {{end}}, group: {{group}} }{{^last}},
      {{/last}}{{/tasks}}
    ]);

    var timeline = new vis.Timeline(document.getElementById('visualization'), items,
                                    {
                                      horizontalScroll: true,
                                      zoomKey: 'ctrlKey',
                                      max: {{& max-time}},
                                      min: {{& min-time}},
                                      showMajorLabels: false,
                                      stack: false,
                                    });
    timeline.setGroups(groups);
  </script>
</body>
</html>
""")

private struct BuildTask {
  public let id: Int
  public let target: String
  public let lane: Int
  public let start: Double
  public let end: Double
}

private struct BuildLane {
  public let id: Int
  public var description: String
}

private struct Event {
  public enum Kind {
    case start
    case end
  }

  public let id: Int
  public let target: String
  public let kind: Kind
  public let timestamp: Double
}

extension Event: Comparable {
  public static func < (_ lhs: Event, _ rhs: Event) -> Bool {
    if lhs.timestamp == rhs.timestamp {
      return switch (lhs.kind, rhs.kind) {
      case (.end, .start): false
      case (.start, .end): true
      case (.start, .start), (.end, .end): false
      }
    }
    return lhs.timestamp < rhs.timestamp
  }
}

extension Collection where Element: NinjaLogEntry {
  fileprivate var tasks: ([BuildTask], [BuildLane]) {
    var events: [Event] = []
    events.reserveCapacity(self.count * 2)

    for entry in self.enumerated() {
      events.append(Event(id: entry.offset, target: entry.element.target,
                          kind: .start, timestamp: entry.element.start))
      events.append(Event(id: entry.offset, target: entry.element.target,
                          kind: .end, timestamp: entry.element.end))
    }
    events.sort()

    var lanes: Heap<Int> = Heap()
    var count = -1

    var active: [Int:(lane: Int, start: Double)] = [:]
    active.reserveCapacity(self.count)

    var tasks: [BuildTask] = []
    tasks.reserveCapacity(self.count)

    for event in events {
      switch event.kind {
      case .start:
        if lanes.min == nil { count += 1 }
        active[event.id] = (lanes.popMin() ?? count, event.timestamp)

      case .end:
        guard let info = active.removeValue(forKey: event.id) else {
          fatalError("Task (\(event.id)) ended without starting")
        }
        lanes.insert(info.lane)

        tasks.append(BuildTask(id: event.id,
                               target: event.target,
                               lane: info.lane,
                               start: info.start,
                               end: event.timestamp))
      }
    }

    return (tasks.sorted(by: { $0.id < $1.id }), (0 ... count).map {
      BuildLane(id: $0, description: "Lane \($0 + 1)")
    })
  }
}

internal struct VisualizeCommand: ParsableCommand {
  static var configuration: CommandConfiguration {
      CommandConfiguration(commandName: "visualize",
                           abstract: "Visualize build statistics and metrics")
  }

  @OptionGroup
  var command: NV

  public func run() throws {
    let file = try NinjaLogParser.load(at: command.logfile)
    let entries = file.entries

    let (tasks, lanes) = entries.tasks

    let statistics = entries.statistics
    let temporary = FileManager.default.temporaryDirectory
                                    .appending(path: UUID().uuidString,
                                               directoryHint: .notDirectory)
                                    .appendingPathExtension("htm")
    let kTimeStyle =
        Duration.UnitsFormatStyle(allowedUnits: [.hours, .minutes, .seconds],
                                  width: .abbreviated)
    try kVisualizationTemplate.render(object: [
      "targets": entries.count,
      "wall-time": statistics.time.wall.formatted(kTimeStyle),
      "cpu-time": statistics.time.cpu.formatted(kTimeStyle),
      "core-count": statistics.parallelism.cores,
      "efficiency": String(format: "%.2f%%",
                           statistics.parallelism.efficiency * 100.0),
      "average-time": statistics.stats.average.formatted(kTimeStyle),
      "groups": lanes.enumerated().map { index, lane in
        ["id": lane.id, "label": lane.description, "last": index == lanes.count - 1]
      },
      "tasks": tasks.enumerated().map { index, task in
        [
          "id": task.id,
          "title": task.target,
          "content": URL(fileURLWithPath: task.target).lastPathComponent,
          "start": task.start * 1000,
          "end": task.end * 1000,
          "group": task.lane,
          "last": index == tasks.count - 1,
        ]
      },
      "bottlenecks": statistics.outliers.slowest.enumerated().map { index, task in
        [
          "rank": index + 1,
          "target": URL(fileURLWithPath: task.target).lastPathComponent,
          "full_target": task.target,
          "duration": task.duration.formatted(kTimeStyle),
        ]
      },
      "min-time": statistics.execution.start * 1000,
      "max-time": statistics.execution.end * 1000,
    ]).data(using: .utf8)?.write(to: temporary, options: .atomic)

#if os(macOS)
    let process = Process()
    process.executableURL = URL(fileURLWithPath: "/usr/bin/open")
    process.arguments = [temporary.path]
    try process.run()
#else
    print(temporary)
#endif
  }
}
